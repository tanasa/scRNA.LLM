# -*- coding: utf-8 -*-
"""extract_and_plot_cell_embeddings_25June2025_v5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yRd3Zf86BEeYj-6bLcexQ1CzlIZzpUh8
"""



"""**What This Script Does (Big Picture)**

1. Takes a pre-trained model that learned to classify heart disease from gene
expression

2. Processes new cell data through this model

3. Extracts "learned representations" (embeddings) that capture disease-relevant patterns

4. Visualizes these representations to see if:

a. Healthy cells cluster together

b. DCM cells cluster together

c. HCM cells cluster together

The model learned meaningful disease signatures.

**Section 1: Initialize EmbExtractor**

```
embex = EmbExtractor(model_type="CellClassifier",
                     num_classes=3,
                     filter_data={"cell_type":["Cardiomyocyte1","Cardiomyocyte2","Cardiomyocyte3"]},
                     max_ncells=1000,
                     emb_layer=0,
                     emb_label=["disease","cell_type"],
                     labels_to_plot=["disease"],
                     forward_batch_size=200,
                     model_version="V1",
                     nproc=16)
```

Parameters explained:

*model_type="CellClassifier"*- Using a cell classification model

*num_classes=3*- Three disease classes: DCM, HC, Normal

*filter_data={"cell_type":[...]}*- Only process these specific cardiomyocyte cell types

*max_ncells=1000*- Maximum number of cells to process

*emb_layer=0*- Extract embeddings from layer 0 (input layer)

*emb_label=["disease","cell_type"]*- Use both disease and cell type labels

*labels_to_plot=["disease"]* - Visualize by disease classification

*forward_batch_size=200* - Process 200 cells at a time

*model_version="V1"*- Use V1 Geneformer model

*nproc=16* - Use 16 CPU cores for processing

**Section 2: Extract Embeddings**

```
embs = embex.extract_embs("../fine_tuned_models/
Geneformer-V1-10M_CellClassifier_cardiomyopathies_220224",
                          "path/to/input_data/",
                          "path/to/output_directory/",
                          "output_prefix")
```

This function:

Takes a **fine-tuned model** (specifically trained on cardiomyopathy data)

Processes **tokenized gene expression data** (not raw scRNA-seq)

Outputs **high-dimensional embeddings** representing each cell

Saves results to specified directory with a** prefix**

**Section 3: Create UMAP Visualization**

```
embex.plot_embs(embs=embs,
                plot_style="umap",
                output_directory="path/to/output_directory/",
                output_prefix="emb_plot")
```

**Section 4: Create Heatmap**

```
embex.plot_embs(embs=embs,
                plot_style="heatmap",
                output_directory="path/to/output_directory/",
                output_prefix="emb_plot")
```

Shows embedding values as a color-coded matrix :

Each row = one cell

Each column = one embedding dimension
"""

!pip install -U transformers
!pip install -q huggingface_hub

# Cell 1: Git LFS installation and repository cloning
# Install git-lfs
!sudo apt-get update
!sudo apt-get install -y git-lfs
!git lfs install

# Clone the Geneformer repository
!git clone https://huggingface.co/ctheodoris/Geneformer

# Cell 2: Install the Geneformer Python package
!cd Geneformer && pip install .

# Optional: Verify installation by importing
import os
import sys
# Add the cloned repo's directory to sys.path if 'pip install .' doesn't make it available immediately
# (Sometimes Colab needs a restart, but this can help)
if '/content/Geneformer' not in sys.path:
    sys.path.insert(0, '/content/Geneformer')

from geneformer import Classifier, EmbExtractor
print("Geneformer imported successfully!")

!ls /content/Geneformer

from geneformer import EmbExtractor

# Create the directory
# !mkdir -p /content/Genecorpus-30M

# Clone with sparse checkout for only example_input_files
# !git clone --filter=blob:none --sparse https://huggingface.co/datasets/ctheodoris/Genecorpus-30M /content/Genecorpus-30M

# Configure sparse checkout to only include example_input_files
# !cd /content/Genecorpus-30M && git sparse-checkout set example_input_files

# Check what was downloaded
# !ls -la /content/Genecorpus-30M/
# !find /content/Genecorpus-30M -type f -name "*.dataset"

# Commented out IPython magic to ensure Python compatibility.
# Clone only the `example_input_files` folder
!git clone --filter=blob:none --no-checkout https://huggingface.co/datasets/ctheodoris/Genecorpus-30M
# %cd Genecorpus-30M
!git sparse-checkout init --cone
!git sparse-checkout set example_input_files
!git checkout main

!cd /content/
!pwd

from huggingface_hub import snapshot_download
import os

# Create directory
os.makedirs("/content/datasets", exist_ok=True)

# Download only the disease_classification directory
dataset_path = snapshot_download(
    repo_id="ctheodoris/Genecorpus-30M",
    repo_type="dataset",
    local_dir="/content/datasets",
    local_dir_use_symlinks=False,
    allow_patterns="example_input_files/cell_classification/disease_classification/*"
)

print(f"Downloaded to: {dataset_path}")
!ls -la /content/datasets/example_input_files/cell_classification/disease_classification/

!pwd
!ls -la ./Geneformer/fine_tuned_models/

# Commented out IPython magic to ensure Python compatibility.
!pwd
!echo "-------"
# %cd /content/
!pwd
!echo "-------"
!ls -1
!echo "-------"
!echo "Genecorpus-30M"
!ls -1 /content/Genecorpus-30M
!echo "-------"
!ls -1
!echo "-------"
!echo "Geneformer"
!ls -1 /content/Geneformer
!echo "-------"
!echo "datasets"
!ls -1 /content/datasets
!echo "-------"

!echo "fined tune model"
!ls -la /content/Geneformer/fine_tuned_models/Geneformer-V1-10M_CellClassifier_cardiomyopathies_220224/
!echo "----------------------"
!echo "disease classification"
!ls -1 Genecorpus-30M/example_input_files/cell_classification/disease_classification
!ls -1 Genecorpus-30M/example_input_files/cell_classification/disease_classification/human_dcm_hcm_nf.dataset



!echo "gene dictionaries"
!ls -la /content/Geneformer/geneformer/gene_dictionaries_30m

import os

# Verify the file exists
token_path = "/content/Geneformer/geneformer/gene_dictionaries_30m/token_dictionary_gc30M.pkl"
print(f"Token dictionary exists: {os.path.exists(token_path)}")
print(f"Full path: {os.path.abspath(token_path)}")

# List all token files to see what's available
!ls -la /content/Geneformer/geneformer/*token*



# What is <cls>?

# The <cls> token is prepended to the input sequence.
# It stands for "classification", and is meant to capture a summary representation of the entire input.
# After passing the sequence through the Transformer, the final hidden state corresponding to the <cls> token is typically used as the aggregate representation for classification tasks.

# GPT4 info : it might not be accurate !

# Geneformer V1 and V2 both utilize a special <cls> token in their transformer models — but with some differences in implementation and usage context.

# 🔹 Geneformer V1
# Based on BERT architecture, which uses the <cls> token at the start of the input.
# The <cls> token embedding is used for tasks like cell classification, gene embedding extraction, and regression.
# When extracting embeddings in cell classification mode, the output corresponding to <cls> (usually the first token) is used as the representation of the cell.

#🔹 Geneformer V2
# Also maintains a classification token, although implementation and tokenization may differ slightly.
# It uses an updated model structure and dictionary (shared_gene_dict.json) which includes the <cls> token.
# The V2 architecture is more modular, but still retains the <cls> token for tasks requiring whole-sequence representation.

import datetime
import os
from geneformer import EmbExtractor

!echo ""
!echo "model : Geneformer-V1-10M"
!ls -1 /content/Geneformer/Geneformer-V1-10M
!echo ""
!echo "model : Geneformer-V2-104M"
!ls -1 /content/Geneformer/Geneformer-V2-104M
!echo ""
!echo "fined tune model"
!ls -la /content/Geneformer/fine_tuned_models/Geneformer-V1-10M_CellClassifier_cardiomyopathies_220224/

# Use V1 Model with CLS token (if you need CLS embeddings)
# If you want to extract <cls> embeddings, switch to a V1 model and provide a token dictionary that includes <cls>.
# About V2 model (model_version="V2") : the input data might be tokenized using a V1 tokenizer, which prepends a <cls> token.
# V2 Geneformer does not use <cls> tokens. So when emb_mode="cls" is attempted, it crashes because the first token is not <cls>.

# Check for available token dictionaries
!find /content -name "*token_dictionary*" -type f
!find /content -name "*.pkl" -type f | grep -i token

import datetime
import os
from geneformer import EmbExtractor

# Create datestamp for naming the output files
current_date = datetime.datetime.now()
datestamp = f"{str(current_date.year)[-2:]}{current_date.month:02d}{current_date.day:02d}{current_date.hour:02d}{current_date.minute:02d}{current_date.second:02d}"
datestamp_min = f"{str(current_date.year)[-2:]}{current_date.month:02d}{current_date.day:02d}"

# Better output directory naming
output_dir_embeddings = f"/content/cardiomyopathy_cell_classification_{datestamp_min}/"
output_prefix_descriptive = "cardio_disease_embeddings"

# Create the directory
os.makedirs(output_dir_embeddings, exist_ok=True)

print(f"Using output directory: {output_dir_embeddings}")
print(f"Output prefix: {output_prefix_descriptive}")

# Model versions

model_version1="V1"
# model_version2="V2"

# Define paths

# token_dictionary_file = "/content/Geneformer/geneformer/gene_dictionaries_30m/token_dictionary_gc30M.pkl"  # or your V1 or V2 token dict
token_dictionary_file = "/content/Geneformer/geneformer/gene_dictionaries_30m/shared_gene_dict.json"
token_dict_path = token_dictionary_file

model_directory = "/content/Geneformer/Geneformer-V1-10M"      # pretrained or fine-tuned model folder
# model_directory = "/content/Geneformer/Geneformer-V2-104M"   # pretrained or fine-tuned model folder
# model_directory = "/content/Geneformer/fine_tuned_models/Geneformer-V1-10M_CellClassifier_cardiomyopathies_220224/"

input_data_file = "/content/Genecorpus-30M/example_input_files/cell_classification/disease_classification/human_dcm_hcm_nf.dataset"

# Verify the paths

if os.path.exists(token_dictionary_file):
    print(f"✅ File exists: {token_dictionary_file}")
else:
    print(f"❌ File does NOT exist: {token_dictionary_file}")

if os.path.exists(model_directory):
    print(f"✅ File exists: {model_directory}")
else:
    print(f"❌ File does NOT exist: {model_directory}")


if os.path.exists(input_data_file):
    print(f"✅ File exists: {input_data_file}")
else:
    print(f"❌ File does NOT exist: {input_data_file}")

# For V1 models:

# They do use the <cls> token — it is automatically prepended to the input.
# You must ensure that emb_mode="cell" is used when extracting cell embeddings.
# In your case, you don’t need to set emb_mode manually if you are using the CellClassifier model with model_version="V1", because that is the default behavior.

# However:
# If you manually set emb_mode="cls" or use code intended for V2 (which may handle embedding modes differently), it can trigger an assertion or lead to unexpected behavior.

!echo "verify the input files and output directory"

for var_name in [
    "input_data_file",
    "model_directory",
    "output_dir_embeddings",
    "output_prefix_descriptive"
]:
    if var_name in globals():
        print(f"✅ {var_name} exists with value: {globals()[var_name]}")
    else:
        print(f"❌ {var_name} is NOT defined")

# WARNING:geneformer.emb_extractor:model_version selected as V1 so changing emb_mode from 'cls' to 'cell' as V1 models do not have a <cls> token.

from geneformer import EmbExtractor

# input_data_file
input_data_file = "/content/Genecorpus-30M/example_input_files/cell_classification/disease_classification/human_dcm_hcm_nf.dataset"

# token_dictionary_file = "/content/Geneformer/geneformer/gene_dictionaries_30m/token_dictionary_gc30M.pkl"  # or your V1 or V2 token dict
token_dictionary_file = "/content/Geneformer/geneformer/gene_dictionaries_30m/shared_gene_dict.json"
token_dict_path = token_dictionary_file

# model choices :
# model_directory = "/content/Geneformer/Geneformer-V1-10M"      # pretrained or fine-tuned model folder
# model_directory = "/content/Geneformer/Geneformer-V2-104M"   # pretrained or fine-tuned model folder
model_directory = "/content/Geneformer/fine_tuned_models/Geneformer-V1-10M_CellClassifier_cardiomyopathies_220224/"


# a piece of code I have tested that uses token_dictionary_file = token_dict_path
# embex = EmbExtractor(
#    model_type="CellClassifier",
#    num_classes=3,
#    filter_data=None,
#    max_ncells=1000,
#    emb_layer=0,
#    emb_label=["disease"],
#    labels_to_plot=["disease"],
#    forward_batch_size=200,
#    model_version="V1",  # ✅ This is correct
#    token_dictionary_file = token_dict_path,  # ✅ V1-compatible token dict
#    nproc=16,
#    emb_mode = "cell"
# )

#  emb_mode 'cls'
#  emb_mode 'cell'

# import os
# os.environ["CUDA_VISIBLE_DEVICES"] = ""
# device=torch.device("cpu")

embex = EmbExtractor(model_type="CellClassifier",
                     num_classes=3,
                     filter_data={"cell_type":["Cardiomyocyte1","Cardiomyocyte2","Cardiomyocyte3"]},
                     max_ncells=1000,
                     emb_layer=0,
                     emb_label=["disease","cell_type"],
                     labels_to_plot=["disease"],
                     forward_batch_size=200,
                     model_version="V1",  # OF NOTE: SET TO V1 MODEL, PROVIDE V1 MODEL PATH IN SUBSEQUENT CODE
                     nproc=16,
                     emb_mode = "cell")

# === Fix NumPy compatibility issue ===
import numpy as np
import warnings

# Suppress the specific warning
warnings.filterwarnings("ignore", message="Unable to avoid copy while creating an array")

# Set NumPy to use older behavior
import os
os.environ['NPY_DISABLE_COPY_WARNINGS'] = '1'

print("🔧 NumPy compatibility settings applied")

# nvidia-smi
!pip install numpy==1.26.4
 # np.array(pa_array, copy=False)

# === Extract embeddings ===
embs = embex.extract_embs(
    model_directory=model_directory,
    input_data_file=input_data_file,
    output_directory=output_dir_embeddings,
    output_prefix=output_prefix_descriptive
)

output_dir_embeddings = f"/content/cardiomyopathy_cell_classification_{datestamp_min}/"
output_prefix_descriptive = "cardio_disease_embeddings"

embex.plot_embs(
            embs=embs,
            plot_style="umap",
            output_directory=output_dir_embeddings,
            output_prefix=f"{output_prefix_descriptive}_umap"
        )
print("✅ V2 UMAP plot created!")

output_dir_embeddings = f"/content/cardiomyopathy_cell_classification_{datestamp_min}/"
output_prefix_descriptive = "cardio_disease_embeddings"

# plot heatmap of cell embeddings
embex.plot_embs(embs=embs,
                plot_style="heatmap",
                output_directory = output_dir_embeddings,
                output_prefix=f"{output_prefix_descriptive}_heatmap"
                )

print("✅ Heatmap plot created!")

!ls -1 /content/cardiomyopathy_cell_classification_250625

embex
embs

"""**Here's an explanation of what you're seeing:**

*   **Rows (Indices 0 to 999)**: Each row corresponds to a single cell. The table shows 1000 rows, indicating that embeddings were extracted for 1000 cells, which aligns with your typical max_ncells=1000 setting in EmbExtractor.

*   **Columns (0 to 255): **These columns contain the numerical embedding values for each cell.

*   **An embedding** is a dense, low-dimensional vector representation of the input data (in this case, gene expression profiles of a cell). The values are floating-point numbers, typically ranging between -1 and 1 or similar.

*  The number of columns (256) indicates the dimensionality of the embeddings. This is the size of the vector used to represent each cell. For example, a Geneformer V1 model often produces embeddings of this size.

*  **disease Column:** This is an additional column on the far right, which likely contains the cell state label (disease status) for each cell (e.g., nf, hcm, dcm). This column was probably included because you specified *emb_label=["disease"]* or similar in your EmbExtractor initialization. It's crucial for downstream analysis and plotting, allowing you to color or group cells by their disease status.

In essence, these embeddings are the Geneformer model's learned numerical "fingerprints" for each cell. Cells with similar gene expression patterns (and thus similar biological states or disease statuses) are expected to have embedding vectors that are numerically "close" to each other in this 256-dimensional space. This makes them suitable for tasks like clustering, classification, and visualization (e.g., UMAP, t-SNE) to uncover biological insights.
"""